<?phpnamespace CodePostauxBundle\Controller;use AppBundle\Entity\Commune;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\JsonResponse;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\Routing\Annotation\Route;class IndexController extends Controller{    /**     * @Route("/search", name="code_search")     */    public function indexAction(Request $request)    {        return $this->render('CodePostauxBundle:Index:index.html.twig');    }    /**     * @Route("/autocomplete", name="autocomplete")     */    public function autocompleteAction(Request $request)    {        $communes = null;        $geoTargettingHelper = $this->container->get('code_postaux.geotargetting.helper');        $communes = $geoTargettingHelper->getAllByZipOrCommune($request->get("query"));        if(ctype_digit($request->get("query")))        {            $communes = array_column($communes, 'codePostal');        }else{           $communes = array_column($communes, 'nom');        }        return new JsonResponse($communes);    }    /**     * @Route("/api/getcode", name="api_getcode")     */    public function getCodeAction(Request $request)    {        $communes = null;        $geoTargettingHelper = $this->container->get('code_postaux.geotargetting.helper');        $token = $request->request->get("api_token");        $key =  "a503b2c5caa17f";        if(!$request->get("api_token") || $request->get("api_token")!= $key)        {            return $this->render("Access denied. Your user credentials are not correct");        }        $communes = $geoTargettingHelper->getAllByZip($request->get("code"));        $commune =  $communes[0];        $proximities = $geoTargettingHelper->getSpacialProximity( $commune['latitude'], $commune['longitude'], $request->get("code"),'K');        $communes = array_merge($communes, $proximities);        return new JsonResponse($communes);    }    /**     * @Route("/ajax/getcode", name="ajax_getcode")     */    public function getCodeByAjaxAction(Request $request)    {        $communes = null;        $geoTargettingHelper = $this->container->get('code_postaux.geotargetting.helper');        $communes = $geoTargettingHelper->getAllByZipOrCommune($request->get("cp"));        $commune =  $communes[0];        $proximities = $geoTargettingHelper->getSpacialProximity($commune['latitude'], $commune['longitude'], $request->get("r"),'K');        echo \GuzzleHttp\json_encode($proximities);        die();        $communes = array_merge($communes, $proximities);        return new JsonResponse($communes);    }    /**     * @Route("/loaddata", name="load_data")     */    public function loadAction()    {        $em = $this->container->get('doctrine.orm.default_entity_manager');        $geoTargettingHelper = $this->container->get('code_postaux.geotargetting.helper');        $base_dir = realpath($this->getParameter('kernel.project_dir'));        $path = $base_dir . DIRECTORY_SEPARATOR . "src/CodePostauxBundle/Data/ville_code_postaux.csv";        $array_communes = $geoTargettingHelper->loadDataFromCsvFile($path);        $arrayChuncks = array_chunk($array_communes, 200);        foreach ($arrayChuncks as $array_communes){            foreach ($array_communes as $line)            {                $commune =  new Commune();                $commune->setIdVille($line[0]) ;                $commune->setNom($line[1]);                $commune->setCodePostal($line[2]);                $commune->setLongitude($line[3]);                $commune->setLatitude($line[4]);                $em->persist($commune);            }            $em->flush();            $em->clear();        }        $em->flush();        $em->clear();    }}